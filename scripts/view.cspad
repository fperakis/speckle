#!/usr/bin/env python

"""
View hdf5 file with the angular average  and the average image 
for the CSPAD and for a given number of shots

Example use:
view.cspad -r 39
"""

import argparse
import numpy as np
import h5py as h
from matplotlib import pyplot as plt

# - parsers
parser = argparse.ArgumentParser(description='View CSPAD from a run of xcslr0016.')
parser.add_argument('-r', '--run', type=int, help='run number to view')

args = parser.parse_args()

run = args.run

# masks
mask_path = '/reg/d/psdm/xcs/xcslr0016/scratch/masks/'
#cspad_mask = np.load(mask_path+'mask_r0019_cspad+borders.npy').astype(bool)
cspad_mask = np.load(mask_path+'mask_r0050_cspad+borders+nonbonded.npy').astype(bool)

# - constants and parameters
epix_shape  = (704, 768)    # dimensions of epix (pixels)
photon_adus = 115.          # parameter for the photon routine
cspad_shape = (2, 185, 388)

# -- cspad data
fname = '/reg/d/psdm/xcs/xcslr0016/scratch/combined/run%04d_ALL.tbl' % (run)
f = h.File(fname, 'r')
cspad_sum = f['cspad/sum'][:]
cspad_sum2 = f['cspad/sum2'][:]
n_shots = f['cspad/summed_shots'][0]
cspad_angavg = f['cspad/lineout'][:]
cspad_angavg_q = f['cspad/lineout_bin_centers'][:]
f.close()
cspad_std = np.sqrt(cspad_sum2/float(n_shots) - np.square(cspad_sum/float(n_shots)))

# -- cspad geometry (Q-map)
qs_path = '/reg/d/psdm/xcs/xcslr0016/scratch/geometry/current.h5'
f = h.File(qs_path, 'r')
q_xyz = f['q_xyz'][:]
cspad_qs = np.sqrt( np.sum(np.square(q_xyz), axis=2) ).reshape(cspad_shape)
f.close()

print "plotting CSPAD data from %s" % fname

# plot figure
plt.figure(figsize=(13, 5))
ax1 = plt.subplot(1,2,1)
im1 = ax1.imshow(np.vstack(np.array([cspad_sum[0]*cspad_mask[0], np.rot90(cspad_sum[1]*cspad_mask[1], 2)]))/float(n_shots), interpolation='nearest')
plt.colorbar(im1)
plt.title('run %d' % run)
plt.xticks()

ax2 = plt.subplot(1,2,2)
im2 = ax2.imshow(np.vstack(np.array([cspad_std[0]*cspad_mask[0], np.rot90(cspad_std[1]*cspad_mask[1], 2)])), interpolation='nearest')
plt.colorbar(im2)
plt.title('standard deviation [ADU]')
plt.xticks()
#plt.tight_layout()

plt.savefig('../figures/r%04d_cspad_fig1.png' % run, dpi=300)
print "saved figure r%04d_cspad_fig1.png" % run

plt.figure(figsize=(13, 5))
ax1 = plt.subplot(1,2,1)
im1 = ax1.imshow(np.vstack(np.array([cspad_qs[0], np.rot90(cspad_qs[1], 2)])), interpolation='nearest')
plt.colorbar(im2)
plt.title('q-calibration')
plt.xticks()

ax2 = plt.subplot(1,2,2)
ax2.plot(cspad_angavg_q, cspad_angavg.sum(axis=0)/cspad_angavg.shape[0], 'o')
plt.xlabel('q [A-1]')
plt.ylabel('I(q) [ADU/pix/shot]')
plt.title('run %d' % run)
plt.axvline(x=1.955, ls='--', color='k')
plt.tight_layout()

plt.savefig('../figures/r%04d_cspad_fig2.png' % run, dpi=300)
print "saved figure r%04d_cspad_fig2.png" % run

plt.show()
