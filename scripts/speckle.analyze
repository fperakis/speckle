#!/usr/bin/env python

"""
Creates an hdf5 file with the angular average  and the average image 
for the CSPAD and for a given number of shots

Example use:
for mpi use this instead:
bsub -n 12 -q psfehq -o output.txt mpirun python speckle.analyse -s 20000 -r 73 -o out.h5
"""

import psana
import argparse
import numpy as np
import h5py as h
import time

from skbeam.core.accumulators.binned_statistic import RadialBinnedStatistic, BinnedStatistic1D

# - parsers
parser = argparse.ArgumentParser(description='Analyze a run of xcslr0016. Use MPI!')
parser.add_argument('-r', '--run', type=int, required=True, help='run number to process')
parser.add_argument('-s','--shots',type=int, default=0, help='run number')
parser.add_argument('-g','--gain',type=float, default=149., help='ADU threshold for photonization (default: 149 ADU)')
parser.add_argument('--first',dest='first', type=int, default=0, help='max shots to process')
parser.add_argument('-o', '--outname',dest='outname', type=str, required=True, help='output filename')

args = parser.parse_args()

run = args.run
shots = args.shots

# -  create the datasourse
ds_string = 'exp=xcslr0016:run=%s:smd' % args.run
ds = psana.MPIDataSource(ds_string)
smldata = ds.small_data(args.outname)

mask_path = '/reg/d/psdm/xcs/xcslr0016/scratch/masks/'
# name template, assumes convention epix1, epix2, epix3, epix4
# old - jonas
#mask_name = "mask_r0019_epix%d+borders.npy"  # e.g. mask_r0019_epix1.npy .. mask_r0019_epix4.npy
# original - fivos
#mask_name = "mask_epix%d.npy"  # e.g. mask_epix1.npy .. mask_epix4.npy
# original - fivos + darkmask - dermen
#mask_name = "darkmask_w_guimask_epix%d.npy"  # e.g. mask_epix1.npy .. mask_epix4.npy
# aggressive - fivos
#mask_name = "mask_epix%d_aggressive.npy"  # e.g. mask_epix1_aggressive.npy .. mask_epix4_aggressive.npy
# masterpiece - fivos
mask_name = "mask_epix%d_std.npy"  # e.g. mask_epix1_std.npy .. mask_epix4_std.npy

############
# EPICS INIT
############
# - constants and parameters
epix_shape  = (704, 768)    # dimensions of epix (pixels)
n_hist = 5                  # length of photon histogram 
n_hist_raw =500
photon_adus = args.gain     # parameter for the photon routine

epix = { x: psana.Detector('epix_%d'%x) for x in range(1,5)}
ipm5 = psana.Detector('XCS-IPM-05')
fee = psana.Detector('FEEGasDetEnergy')
ebeam = psana.Detector('EBeam')
dio = psana.Detector('XCS-SND-DIO')

# - initialise
local_sum_imgs ={x: np.zeros([epix_shape[0],epix_shape[1]],dtype=int) 
    for x in range(1,5)}
local_sum2_imgs ={x: np.zeros([epix_shape[0],epix_shape[1]],dtype=int) 
    for x in range(1,5)}
local_photon_sum_imgs ={x: np.zeros([epix_shape[0],epix_shape[1]],dtype=int) 
    for x in range(1,5)}

# - mask
epix_mask_names = {x: mask_name%x for x in range(1,5) }
epix_masks = {x: np.load( mask_path + epix_mask_names[x]) for x in range(1,5)}
#epix_masks = {x: np.ones(epix_shape) for x in range(1,5)}
epix_photon_masks = {x: np.ones(epix_shape, dtype=np.uint8) for x in range(1,5)}

############
# CSPAD INIT
############
cspad = psana.Detector('cs140_diff')

# - constants and parameters
cspad_shape = (2, 185, 388)

# - initialise
cspad_sum = np.zeros(cspad_shape)
cspad_sum2 = np.zeros(cspad_shape) # sum of squares for cspad
cspad_summed_shots = 0

# - mask
#cspad_mask = np.load(mask_path+'mask_r0019_cspad+borders.npy').astype(bool)
cspad_mask = np.load(mask_path+'mask_r0050_cspad+borders+nonbonded.npy').astype(bool)
#cspad_mask = np.ones(cspad_shape)

# -- cspad geometry (Q-map)
# need to do the qs
qs_path = '/reg/d/psdm/xcs/xcslr0016/scratch/geometry/current.h5'
f = h.File(qs_path, 'r')
q = f['q_xyz'][:]
cspad_qs = np.sqrt( np.sum(np.square(q), axis=2) )
f.close()
#qs_path = '/reg/d/psdm/xcs/xcslr0016/scratch/geometry/q_mags.npy'
#cspad_qs = np.load(qs_path)*mask
#cspad_qs = np.ones(cspad_shape)

# -- angular integration
cspad_radint_bins = 500
cspad_radint = BinnedStatistic1D(cspad_qs.flatten(),
                 statistic='mean',
                 bins=cspad_radint_bins,
                 range=None, mask=cspad_mask.flatten())

# helper
def gasdet_energy(event):
    f = fee.get(event)
    if f is not None:
        avg = np.mean([ f.f_11_ENRC(), f.f_12_ENRC(),
                        f.f_21_ENRC(), f.f_22_ENRC() ])
    else:
        avg = -1.0
    return avg

# - main loop
t0 = time.time()
seen_evts = 0
count = 0
for ie, evt in enumerate(ds.events()):
    if ie < args.first:
        print ("Skipping event %d/%d"%(ie+1, args.first))
        continue
    
    if seen_evts == args.shots:
        print("Reached max number of events!")
        break #TJ: we should not do this, can freeze jobs occassionally
    
    seen_evts += 1

####################   
#   EPICS detectors
####################   
    imgs  = { x: epix[x].calib(evt) for x in range( 1,5)}
    photon_hist = { 'epix_%d'%x: np.zeros(n_hist) for x in range( 1,5) }
    raw_hist = { 'epix_%d'%x: np.zeros(n_hist) for x in range( 1,5) }

    #gas_det = gasdet_energy(evt)
    e_beam  = ebeam.get(evt)
    snd_dio  = dio.get(evt)
   
    if all( [ I is not None for I in imgs] ): 
        is_good  = 1
        for x in range(1,5):
#           keep the running sums for each imgs
            local_sum_imgs[x] += np.array(imgs[x]).astype(int)
            local_sum2_imgs[x] += np.array(imgs[x]).astype(int)**2
#           histograms           
            photon_img = epix[x].photons(evt, adu_per_photon=photon_adus, mask=epix_masks[x].astype(np.uint8))
            #print type(photon_img)
            epix_photon_masks[x][photon_img > 2] = 0
            #print "2-photon events: %d" % ((photon_img > 1).sum())
            #print "3-photon events (%d pixels): %d" % (np.logical_not(epix_photon_masks[x]).sum(), (photon_img > 2).sum())
            local_photon_sum_imgs[x] += photon_img.astype(int)
            photon_hist['epix_%d'%x] = np.histogram(photon_img[epix_masks[x] == 1], bins=np.arange(n_hist+1))[0]
            raw_hist['epix_%d'%x] = np.histogram(imgs[x][epix_masks[x] == 1], bins=np.arange(n_hist_raw+1))[0]

        ebeam_energy = e_beam.ebeamPhotonEnergy()
        dio_channels = snd_dio.peakA()
        diode = ipm5.sum(evt)
    else:
        is_good = 0
        ebeam_energy = -1
        diode = -1
        dio_channels = np.zeros(16)

    smldata.event({'histogram' : photon_hist })
    smldata.event({'raw_histogram' : raw_hist })
    
    smldata.event(good_shots = is_good,
                  ipm5_diode = diode,
                  snd_dio = dio_channels,
                  #gas_detector = gas_det,
                  e_energy = ebeam_energy) 
################  
  
###################
#   CSPAD detectors
###################
    cspad_calib = cspad.calib(evt)
    if cspad_calib is not None:
        cspad_sum  += cspad_calib
        cspad_sum2  += cspad_calib**2
        cspad_summed_shots += 1
        cspad_lo = cspad_radint(cspad_calib.flatten())
    else:
        cspad_lo = np.zeros(cspad_radint_bins)

    smldata.event({'cspad' : {'lineout' : cspad_lo}})
################  
    
    print '%d | %.2f Hz (per core)' % (ie, 1./(time.time()-t0))
    t0 = time.time()
    
    count += 1
    print("processed %d / %d images"\
        %( count , (ie +1 - args.first) ))

# save photon threshold
smldata.save({'photon_threshold': photon_adus})

# save epix sums + mask
epix_sum_imgs = {'epix_%d'%x: smldata.sum(local_sum_imgs[x])
    for x in range(1,5) }
smldata.save({'epix_sum': epix_sum_imgs})
epix_sum2_imgs = {'epix_%d'%x: smldata.sum(local_sum2_imgs[x])
    for x in range(1,5) }
smldata.save({'epix_sum2': epix_sum2_imgs})
epix_photon_sum_imgs = {'epix_%d'%x: smldata.sum(local_photon_sum_imgs[x])
    for x in range(1,5) }
smldata.save({'epix_photon_sum': epix_photon_sum_imgs})
smldata.save({'epix_mask': {'epix_%d'%x: epix_masks[x].astype(int) for x in range(1,5) }})
smldata.save({'epix_photon_mask': {'epix_%d'%x: epix_photon_masks[x].astype(int) for x in range(1,5) }})

# save cspad sums + mask
smldata.save({'cspad': {'sum': smldata.sum(cspad_sum), 'sum2': smldata.sum(cspad_sum2), 'summed_shots': smldata.sum(cspad_summed_shots), 'mask': cspad_mask.astype(int)}})
smldata.save({'cspad': {'lineout_bin_centers': cspad_radint.bin_centers}})

#if smldata.master:
#    smldata.file_handle.close()
#    print 'SMALLDATA DONE'
