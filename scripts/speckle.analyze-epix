#!/usr/bin/env python

"""
Creates an hdf5 file with the photon histograms and the average image 
for one of the epix detectors and for a given number of shots

Example command:
#bsub -n 12 -q psfehq -o output.txt mpirun python speckle.analyse-epix.py -s 20000 -r 295 -e 3
"""


import psana
import argparse
import numpy as np
import time


# - parsers
parser = argparse.ArgumentParser(description='Analyze a run of xcsm9816. Use MPI!')
parser.add_argument('-r', '--run', type=int, help='run number to process')
parser.add_argument('-s','--SHOTS',type=int,default=83,help='run number')
parser.add_argument('-e','--epix_num',type=int,default=1,help='epix number')
args = parser.parse_args()

run      = args.run
shots    = args.SHOTS
epix_num = args.epix_num

# - constants and parameters
epix_shape  = (704, 768)    # dimensions of epix (pixels)
n_hist      = 5             # length of photon histogram 
photon_adus = 115.          # parameter for the photon routine
num_rings   = 10            # number of rings over q space

# -  create the datasource
ds_string = 'exp=xcsm9816:run=%s:smd' % args.run
print 'Processing: %s' % ds_string
ds = psana.MPIDataSource(ds_string)
#ds.break_after(shots)

smldata = ds.small_data('/reg/d/psdm/xcs/xcsm9816/scratch/epix/epix_r%04d_s%d_e%d_qdep_rings.h5' % (run,shots,epix_num))
epix    = psana.Detector('epix_%d'%epix_num)
ipm6    = psana.Detector('XCS-IPM-gon')
fee     = psana.Detector('FEEGasDetEnergy')
ebeam   = psana.Detector('EBeam')

# - initialise
local_sum_img = np.zeros([epix_shape[0],epix_shape[1]],dtype=int)

# - mask
mask_path = '/reg/neh/home4/fperakis/xcsm9816/speckle/fivos/masks/'
mask      = np.load(mask_path+'mask_run296_epix%d_shots20000.npy'%(epix_num))
ring_mask = np.load(mask_path + 'ring_mask.npy')
r_mask    = np.array(mask*ring_mask[epix_num-1])

# -- helper functions
def gasdet_energy(event):
    f = fee.get(event)
    if f is not None:
        avg = np.mean([ f.f_11_ENRC(), f.f_12_ENRC(),
                        f.f_21_ENRC(), f.f_22_ENRC() ])
    else:
        avg = -1.0
    return avg

# - main loop
t0 = time.time()
for ie, evt in enumerate(ds.events()):
    #if ie >= shots: break 
    img     = epix.calib(evt)
    gas_det = gasdet_energy(evt)
    e_beam  = ebeam.get(evt)
    photon_hist = np.zeros([num_rings,n_hist-1])

    if img is not None:
        is_good        = 1
        img            = epix.photons(evt, adu_per_photon=photon_adus)
        local_sum_img += np.array(img)
	ebeam_energy   = e_beam.ebeamPhotonEnergy()
        diode          = ipm6.sum(evt)
	# -- loop over rings
        for ir in range(1,num_rings):
               photon_hist[ir,:],hx = np.histogram(img[r_mask==ir], bins=np.arange(n_hist))
    else:
        is_good        = 0
	ebeam_energy   = -1
	diode          = -1

    smldata.event(histogram    = photon_hist,
                  good_shots   = is_good,
                  direct_diode = diode,
                  gas_detector = gas_det,
                  e_energy     = ebeam_energy)
    print '%d | %.2f Hz (per core) | good=%d' % (ie, 1./(time.time()-t0), is_good)
    t0 = time.time()

sum_img = smldata.sum(local_sum_img)
smldata.save(epix_sum=sum_img*mask)
smldata.close()

