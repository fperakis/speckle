#!/usr/bin/env python

"""
Creates an hdf5 file with the photon histograms and the average image
for one of the epix detectors and for a given number of shots

Example command:
#bsub -n 12 -q psfehq -o output.txt mpirun python speckle.analyse-epix.py -s 20000 -r 295 -e 3
"""

import psana
import argparse
import numpy as np
import time

# - parsers
parser = argparse.ArgumentParser(description='Analyze a run of xcslr0016. Use MPI!')
parser.add_argument('-r', '--run', type=int, help='run number to process')
parser.add_argument('-s','--SHOTS',type=int,default=1000000, help='max number of shots to process')
parser.add_argument('-e','--epix_num',type=int,default=1, help='epix number')
args = parser.parse_args()

run      = args.run
shots    = args.SHOTS
epix_num = args.epix_num

# - constants and parameters
epix_shape  = (704, 768)    # dimensions of epix (pixels)
n_hist      = 5             # length of photon histogram 
photon_adus = 115.          # parameter for the photon routine

# -  create the datasource
ds_string = 'exp=xcslr0016:run=%s:smd' % args.run#:dir=/reg/d/ffb/xcs/xcslr0016/xtc:live' % args.run
print 'Processing: %s' % ds_string
ds = psana.MPIDataSource(ds_string)
ds.break_after(shots)

smldata = ds.small_data('/reg/d/psdm/xcs/xcslr0016/scratch/epix/epix_r%04d_s%d_e%.h5' % (run,shots,epix_num))
epix    = psana.Detector('epix_%d'%epix_num)
ipm5    = psana.Detector('XCS-IPM-05')
ebeam   = psana.Detector('EBeam')

# - initialise
local_sum_img = np.zeros([epix_shape[0],epix_shape[1]],dtype=int)

# - mask
mask_path = '/reg/d/psdm/xcs/xcslr0016/scratch/masks/'
mask      = np.load(mask_path+'mask_epix%d.npy'%(epix_num))

# - main loop
t0 = time.time()
for ie, evt in enumerate(ds.events()):

    # TJ says: do not do this with MPI
    #if ie >= shots: break 
    img     = epix.calib(evt)
    e_beam  = ebeam.get(evt)
    photon_hist = np.zeros(n_hist-1)

    if img is not None:
        is_good        = 1
        img            = epix.photons(evt, adu_per_photon=photon_adus)
        local_sum_img += np.array(img)
	ebeam_energy   = e_beam.ebeamPhotonEnergy()
        diode          = ipm5.sum(evt)
        photon_hist,hx = np.histogram(img[r_mask==ir], bins=np.arange(n_hist))
    else:
        is_good        = 0
	ebeam_energy   = -1
	diode          = -1

    smldata.event(histogram    = photon_hist,
                  good_shots   = is_good,
                  ipm5_diode   = diode,
                  gas_detector = gas_det,
                  e_energy     = ebeam_energy)
    print '%d | %.2f Hz (per core) | good=%d' % (ie, 1./(time.time()-t0), is_good)
    t0 = time.time()

sum_img = smldata.sum(local_sum_img)
smldata.save(epix_sum=sum_img*mask)
smldata.close()

